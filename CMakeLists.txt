CMAKE_MINIMUM_REQUIRED(VERSION 3.0)

PROJECT(liblog VERSION 0.0.1)

INCLUDE(CMakePackageConfigHelpers)
INCLUDE(GNUInstallDirs)

SET(CMAKE_USE_RELATIVE_PATHS TRUE)
SET(INSTALL_INCLUDE_DIR "${CMAKE_INSTALL_INCLUDEDIR}/${PROJECT_NAME}-${PROJECT_VERSION}")
SET(INSTALL_CONFIG_FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config.cmake")
SET(INSTALL_VERSION_FILE "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}-config-version.cmake")

FIND_PACKAGE(Doxygen)
FIND_PACKAGE(libtools COMPONENTS uriparser REQUIRED)

# catch lazy errors during compilation and enable GNU extensions
ADD_DEFINITIONS(-pedantic -std=gnu99 -Wall -Wextra -Werror -D_GNU_SOURCE)

# define and share object files between shard and static libraries
SET(LIBLOG_HEADERS
include/liblog/defines.h
include/liblog/log.h
include/liblog/types.h
include/liblog/loggers/color.h
include/liblog/loggers/file.h
)

SET(LIBLOG_SOURCES
source/log.c
source/namespace.h
source/namespace.c
source/stderr.h
source/stderr.c
source/logger.c
source/loggers/color.c
source/loggers/file.c
)
ADD_LIBRARY(liblog_objects OBJECT
${LIBLOG_HEADERS}
${LIBLOG_SOURCES}
)

TARGET_INCLUDE_DIRECTORIES(liblog_objects
PRIVATE
	include
	$<TARGET_PROPERTY:libtools,INTERFACE_INCLUDE_DIRECTORIES>
)

SET_PROPERTY(TARGET liblog_objects PROPERTY COMPILE_FLAGS "-fPIC")

# define static library
ADD_LIBRARY(liblog_static STATIC $<TARGET_OBJECTS:liblog_objects>)

SET_TARGET_PROPERTIES(liblog_static PROPERTIES OUTPUT_NAME "log")
SET_TARGET_PROPERTIES(liblog_static PROPERTIES VERSION "${PROJECT_VERSION}")
SET_TARGET_PROPERTIES(liblog_static PROPERTIES SOVERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}")

TARGET_INCLUDE_DIRECTORIES(liblog_static
INTERFACE
	$<INSTALL_INTERFACE:${INSTALL_INCLUDE_DIR}>
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
)

TARGET_LINK_LIBRARIES(liblog_static
PUBLIC
	libtools_static
)

# define shared library
ADD_LIBRARY(liblog SHARED $<TARGET_OBJECTS:liblog_objects>)

SET_TARGET_PROPERTIES(liblog PROPERTIES OUTPUT_NAME "log")
SET_TARGET_PROPERTIES(liblog PROPERTIES VERSION "${PROJECT_VERSION}")
SET_TARGET_PROPERTIES(liblog PROPERTIES SOVERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}")

TARGET_INCLUDE_DIRECTORIES(liblog
INTERFACE
	$<INSTALL_INTERFACE:${INSTALL_INCLUDE_DIR}>
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
)

TARGET_LINK_LIBRARIES(liblog
PUBLIC
	libtools
)

# generate package version and configuration files
WRITE_BASIC_PACKAGE_VERSION_FILE("${INSTALL_VERSION_FILE}"
VERSION
	${PROJECT_VERSION}
COMPATIBILITY
	SameMajorVersion
)

CONFIGURE_PACKAGE_CONFIG_FILE("cmake/${PROJECT_NAME}-config.cmake.in"
"${INSTALL_CONFIG_FILE}"
INSTALL_DESTINATION
	"${CMAKE_INSTALL_LIBDIR}"
)

# install Runtime
INSTALL(TARGETS liblog
EXPORT
	"${PROJECT_NAME}"
LIBRARY DESTINATION
	"${CMAKE_INSTALL_LIBDIR}"
COMPONENT
	Runtime
)

# install Devel
INSTALL(TARGETS liblog_static
EXPORT
	"${PROJECT_NAME}"
ARCHIVE DESTINATION
	"${CMAKE_INSTALL_LIBDIR}"
COMPONENT
	Devel
)

INSTALL(DIRECTORY "include/liblog"
DESTINATION
	"${INSTALL_INCLUDE_DIR}"
COMPONENT
	Devel
PATTERN *.h
)

INSTALL(FILES
"${INSTALL_VERSION_FILE}"
"${INSTALL_CONFIG_FILE}"
DESTINATION
	"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}-${PROJECT_VERSION}"
COMPONENT
	Devel
)

INSTALL(EXPORT "${PROJECT_NAME}"
FILE
	${PROJECT_NAME}-targets.cmake
DESTINATION
	"${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}-${PROJECT_VERSION}"
COMPONENT Devel
)

# generate man pages, if Doxygen available
IF(DOXYGEN_FOUND)
	CONFIGURE_FILE(
	"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Doxyfile.in"
	"${CMAKE_CURRENT_BINARY_DIR}/Doxyfile"
	@ONLY
	)

	ADD_CUSTOM_TARGET(${PROJECT_NAME}_doc
	"${DOXYGEN_EXECUTABLE}"
	WORKING_DIRECTORY
		${CMAKE_CURRENT_BINARY_DIR}
	COMMENT
		"Generating API documentation with Doxygen"
	SOURCES
		"${LIBLOG_HEADERS}"
		"${CMAKE_CURRENT_BINARY_DIR}/Doxyfile"
	)

	INSTALL(DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/man/"
	DESTINATION
		"${CMAKE_INSTALL_MANDIR}"
	COMPONENT
		Devel
	FILES_MATCHING
		PATTERN "*.3"
	)
ENDIF()


ADD_EXECUTABLE(testlog
include/liblog/defines.h
include/liblog/types.h
source/main.c
)

SET_TARGET_PROPERTIES(testlog PROPERTIES LINKER_LANGUAGE CXX)

TARGET_LINK_LIBRARIES(testlog
PRIVATE
	liblog
)

TARGET_INCLUDE_DIRECTORIES(testlog
PRIVATE
	include
)
